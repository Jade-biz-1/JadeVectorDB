version: '3.8'

# JadeVectorDB Local Development Docker Compose
# This setup builds the core library and provides a development environment

services:
  # Core library build service
  jadevectordb-core:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: jadevectordb/core:dev
    container_name: jadevectordb-core-dev
    volumes:
      # Mount backend source for development
      - ./backend:/app/backend:ro
      # Persist build artifacts
      - jadevectordb_build:/app/backend/build_coverage
      # Data and config volumes
      - jadevectordb_data:/data
      - jadevectordb_config:/config
    networks:
      - jadevectordb_network
    command: >
      sh -c "echo 'JadeVectorDB Core Library' &&
             echo 'Library: /app/backend/build_coverage/libjadevectordb_core.a' &&
             ls -lh /app/backend/build_coverage/libjadevectordb_core.a &&
             echo '' &&
             echo 'To use this container for development:' &&
             echo '  docker exec -it jadevectordb-core-dev /bin/bash' &&
             tail -f /dev/null"
    restart: unless-stopped

  # Development shell - for interactive development
  jadevectordb-shell:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: jadevectordb/core:dev
    container_name: jadevectordb-shell
    volumes:
      - ./backend:/app/backend
      - jadevectordb_build:/app/backend/build_coverage
      - jadevectordb_data:/data
      - jadevectordb_config:/config
    networks:
      - jadevectordb_network
    stdin_open: true
    tty: true
    command: /bin/bash
    profiles:
      - dev

  # Prometheus for monitoring (optional, can be enabled for testing)
  prometheus:
    image: prom/prometheus:latest
    container_name: jadevectordb-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - jadevectordb_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional, can be enabled for testing)
  grafana:
    image: grafana/grafana-oss:latest
    container_name: jadevectordb-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    networks:
      - jadevectordb_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  jadevectordb_data:
    driver: local
  jadevectordb_config:
    driver: local
  jadevectordb_build:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  jadevectordb_network:
    driver: bridge
    name: jadevectordb_dev_network
