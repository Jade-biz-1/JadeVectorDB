# JadeVectorDB Development Dockerfile
# This builds the core library successfully. REST API server requires additional fixes.

FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    software-properties-common \
    pkg-config \
    libssl-dev \
    ca-certificates \
    lsb-release \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install Eigen3 and Boost
RUN apt-get update && apt-get install -y \
    libeigen3-dev \
    libboost-system-dev \
    libboost-date-time-dev \
    libboost-filesystem-dev \
    libboost-program-options-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Apache Arrow (required dependency)
RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
    apt-get update && \
    apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
    apt-get update && \
    apt-get install -y -V libarrow-dev \
    && rm -rf /var/lib/apt/lists/* \
    && rm -f ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb

# Install gRPC and Protobuf (optional, for future use)
RUN apt-get update && apt-get install -y \
    libgrpc++-dev \
    libprotobuf-dev \
    protobuf-compiler-grpc \
    && rm -rf /var/lib/apt/lists/*

# Install Google Test and Benchmark (for testing)
RUN apt-get update && apt-get install -y \
    libgtest-dev \
    libbenchmark-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy backend source
COPY backend/ ./backend/

# Create build directory and configure
WORKDIR /app/backend
RUN rm -rf build_coverage && mkdir -p build_coverage

# Build the core library
WORKDIR /app/backend/build_coverage
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=20 \
    -DCMAKE_CXX_FLAGS="-O3 -march=native" \
    && make -j$(nproc) jadevectordb_core

# Verify the library was built
RUN ls -lh libjadevectordb_core.a

# Create a runtime user (security best practice)
RUN useradd -m -u 1000 jadevector && \
    chown -R jadevector:jadevector /app

USER jadevector

# Set environment variables
ENV JADE_DB_DATA_DIR=/data
ENV JADE_DB_CONFIG_DIR=/config
ENV JADE_DB_LOG_LEVEL=INFO

# Create data and config directories
USER root
RUN mkdir -p /data /config && chown -R jadevector:jadevector /data /config
USER jadevector

WORKDIR /app/backend/build_coverage

# Note: The main server executable (jadevectordb) has compilation issues in rest_api.cpp
# that need to be fixed. For now, this container provides the core library.
# To complete the server, fix the issues in src/api/rest/rest_api.cpp:
#   - LifecycleConfig struct definition
#   - AuthManager::get_instance() vs constructor
#   - Policy field access issues

# Default command - shows build status
CMD ["echo", "JadeVectorDB Core Library built successfully. See /app/backend/build_coverage/libjadevectordb_core.a"]
